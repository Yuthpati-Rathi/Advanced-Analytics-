{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EGRMGMT 590.10 Homework 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Due at 6:15pm ET on Thursday, January 24*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Make sure you have pandas, NumPy, and pydataset installed before working on the assignment.\n",
    "+ There are 20 questions in total. The first 15 questions requires coding and the last 5 does not.\n",
    "    + For the 15 coding questions, submit both your code and the results upon running your code.\n",
    "    + For the 5 non-coding questions, submit your answers using Markdown or comments.\n",
    "+ Each question is worth 0.5 points. Your grades are based on the accuracy of the results, not the code execution speed.\n",
    "+ You can work on questions in your preferred order as the questions are independent with each another.\n",
    "+ Submit the .ipynb file to Sakai before 6:15pm ET on Thursday, January 24.\n",
    "+ Assignments handed in late will lose 1 point every 24-hour window after 6:15pm ET on Thursday, January 24."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Coding Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use an IPython built-in magic command to return the current working directory path"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'C:\\\\Users\\\\yuthp'"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%pwd\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a for loop to update the dictionary by_length which groups the words in the list word_samples by the length of words. The keys in by_length are the lengths of words."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "word_samples = ['chalk', 'awk', 'pear', 'algebra', 'tie', 'nut', 'physics', 'magnolia', 'sycamore']\n",
    "by_length = {}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{5: 1, 3: 3, 4: 1, 7: 2, 8: 2}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for element in word_samples:\n",
    "    if len(element) in by_length:\n",
    "        by_length[len(element)]+=1\n",
    "    else:\n",
    "        by_length[len(element)]=1\n",
    "by_length"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the map and lambda functions to create a list numbers_sq which contains the squared value of each element in the list numbers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "numbers = [1, 2, 3, 4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 4, 9, 16]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numbers_sq=list(map(lambda x : x**2,numbers))\n",
    "numbers_sq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select every other element from list1 starting from the element with index = 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([6, 3, 7, 4, 6, 9, 2, 6, 7, 4, 3, 7, 7, 2, 5, 4, 1, 7, 5, 1])"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.random.seed(42)\n",
    "list1 = np.random.randint(0,10,20)\n",
    "list1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([3, 7, 4, 6, 9, 2, 6, 7, 4, 3, 7, 7, 2, 5, 4, 1, 7, 5, 1])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list1[1:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Rename the columns 0, 1, and 2 in the Dataframe df0 to \"apple\", \"banana\", and \"orange\" respectively"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2\n",
       "0  3  4  2\n",
       "1  4  4  1\n",
       "2  2  2  2\n",
       "3  4  3  2\n",
       "4  4  1  3"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd, numpy as np\n",
    "np.random.seed(42)\n",
    "df0 = pd.DataFrame(np.random.randint(low=0, high=5, size=(5, 3)))\n",
    "df0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>apple</th>\n",
       "      <th>banana</th>\n",
       "      <th>orange</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   apple  banana  orange\n",
       "0      3       4       2\n",
       "1      4       4       1\n",
       "2      2       2       2\n",
       "3      4       3       2\n",
       "4      4       1       3"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df0.columns=('apple','banana','orange')\n",
    "df0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Identify names of columns in the Dataframe df1 which have missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a    b    c\n",
       "0  5  7.0  NaN\n",
       "1  8  9.0  3.0\n",
       "2  2  NaN  2.0\n",
       "3  0  1.0  8.0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd, numpy as np\n",
    "sample_data = {'a': [5, 8, 2, 0], 'b': [7, 9, np.NaN, 1], 'c': [np.NaN, 3, 2, 8] }\n",
    "df1 = pd.DataFrame(data = sample_data)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 4 entries, 0 to 3\n",
      "Data columns (total 3 columns):\n",
      "a    4 non-null int64\n",
      "b    3 non-null float64\n",
      "c    3 non-null float64\n",
      "dtypes: float64(2), int64(1)\n",
      "memory usage: 176.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 7"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select rows in the Dataframe df1 which have no missing values in both column b and c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>5</td>\n",
       "      <td>7.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a    b    c\n",
       "0  5  7.0  NaN\n",
       "1  8  9.0  3.0\n",
       "2  2  NaN  2.0\n",
       "3  0  1.0  8.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd, numpy as np\n",
    "sample_data = {'a': [5, 8, 2, 0], 'b': [7, 9, np.NaN, 1], 'c': [np.NaN, 3, 2, 8] }\n",
    "df1 = pd.DataFrame(data = sample_data)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>a</th>\n",
       "      <th>b</th>\n",
       "      <th>c</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>8</td>\n",
       "      <td>9.0</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   a    b    c\n",
       "1  8  9.0  3.0\n",
       "3  0  1.0  8.0"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.loc[(df1[\"b\"].notnull()) & (df1[\"c\"].notnull()),:]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use the Dataframe df2 and calculate the average Sepal.Length and Sepal.Width of all the instances whose Species are versicolor or virginica"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sepal.Length</th>\n",
       "      <th>Sepal.Width</th>\n",
       "      <th>Petal.Length</th>\n",
       "      <th>Petal.Width</th>\n",
       "      <th>Species</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.1</td>\n",
       "      <td>3.5</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.9</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4.7</td>\n",
       "      <td>3.2</td>\n",
       "      <td>1.3</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4.6</td>\n",
       "      <td>3.1</td>\n",
       "      <td>1.5</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5.0</td>\n",
       "      <td>3.6</td>\n",
       "      <td>1.4</td>\n",
       "      <td>0.2</td>\n",
       "      <td>setosa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Sepal.Length  Sepal.Width  Petal.Length  Petal.Width Species\n",
       "1           5.1          3.5           1.4          0.2  setosa\n",
       "2           4.9          3.0           1.4          0.2  setosa\n",
       "3           4.7          3.2           1.3          0.2  setosa\n",
       "4           4.6          3.1           1.5          0.2  setosa\n",
       "5           5.0          3.6           1.4          0.2  setosa"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pydataset import data\n",
    "import pandas as pd\n",
    "df2 = data('iris')\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Sepal.Length    6.262\n",
       "Sepal.Width     2.872\n",
       "dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2.loc[(df2[\"Species\"]==\"versicolor\") | (df2[\"Species\"]==\"virginica\"),[\"Sepal.Length\",\"Sepal.Width\"]].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the Dataframe df3, return the names of columns whose data type is 'int64'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Disp</th>\n",
       "      <th>Disp2</th>\n",
       "      <th>Eng.Rev</th>\n",
       "      <th>Front.Hd</th>\n",
       "      <th>Frt.Leg.Room</th>\n",
       "      <th>Frt.Shld</th>\n",
       "      <th>Gear.Ratio</th>\n",
       "      <th>Gear2</th>\n",
       "      <th>HP</th>\n",
       "      <th>...</th>\n",
       "      <th>Steering</th>\n",
       "      <th>Tank</th>\n",
       "      <th>Tires</th>\n",
       "      <th>Trans1</th>\n",
       "      <th>Trans2</th>\n",
       "      <th>Turning</th>\n",
       "      <th>Type</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Wheel.base</th>\n",
       "      <th>Width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acura Integra</th>\n",
       "      <td>Japan</td>\n",
       "      <td>112.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3.26</td>\n",
       "      <td>3.21</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>13.2</td>\n",
       "      <td>195/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>2700.0</td>\n",
       "      <td>102</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acura Legend</th>\n",
       "      <td>Japan</td>\n",
       "      <td>163.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2505.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>55.5</td>\n",
       "      <td>2.95</td>\n",
       "      <td>3.02</td>\n",
       "      <td>160.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>18.0</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>42.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3265.0</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 100</th>\n",
       "      <td>Germany</td>\n",
       "      <td>141.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2775.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>56.5</td>\n",
       "      <td>3.27</td>\n",
       "      <td>3.25</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>21.1</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>106</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 80</th>\n",
       "      <td>Germany</td>\n",
       "      <td>121.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2835.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.5</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3.25</td>\n",
       "      <td>108.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>15.9</td>\n",
       "      <td>175/70</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2670.0</td>\n",
       "      <td>100</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMW 325i</th>\n",
       "      <td>Germany</td>\n",
       "      <td>152.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2625.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>3.02</td>\n",
       "      <td>2.99</td>\n",
       "      <td>168.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>16.4</td>\n",
       "      <td>195/65</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2895.0</td>\n",
       "      <td>101</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country   Disp  Disp2  Eng.Rev  Front.Hd  Frt.Leg.Room  \\\n",
       "Acura Integra    Japan  112.0    1.8   2935.0       3.5          41.5   \n",
       "Acura Legend     Japan  163.0    2.7   2505.0       2.0          41.5   \n",
       "Audi 100       Germany  141.0    2.3   2775.0       2.5          41.5   \n",
       "Audi 80        Germany  121.0    2.0   2835.0       4.0          42.0   \n",
       "BMW 325i       Germany  152.0    2.5   2625.0       2.0          42.0   \n",
       "\n",
       "               Frt.Shld  Gear.Ratio  Gear2     HP  ...    Steering  Tank  \\\n",
       "Acura Integra      53.0        3.26   3.21  130.0  ...       power  13.2   \n",
       "Acura Legend       55.5        2.95   3.02  160.0  ...       power  18.0   \n",
       "Audi 100           56.5        3.27   3.25  130.0  ...       power  21.1   \n",
       "Audi 80            52.5        3.25   3.25  108.0  ...       power  15.9   \n",
       "BMW 325i           52.0        3.02   2.99  168.0  ...       power  16.4   \n",
       "\n",
       "                Tires  Trans1  Trans2 Turning     Type  Weight  Wheel.base  \\\n",
       "Acura Integra  195/60   man.5  auto.4    37.0    Small  2700.0         102   \n",
       "Acura Legend   205/60   man.5  auto.4    42.0   Medium  3265.0         109   \n",
       "Audi 100       205/60   man.5  auto.3    39.0   Medium  2935.0         106   \n",
       "Audi 80        175/70   man.5  auto.3    35.0  Compact  2670.0         100   \n",
       "BMW 325i       195/65   man.5  auto.4    35.0  Compact  2895.0         101   \n",
       "\n",
       "               Width  \n",
       "Acura Integra     67  \n",
       "Acura Legend      69  \n",
       "Audi 100          71  \n",
       "Audi 80           67  \n",
       "BMW 325i          65  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pydataset import data\n",
    "import pandas as pd\n",
    "df3 = data('car90')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Length', 'Luggage', 'Wheel.base', 'Width']"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.columns[df3.dtypes=='int64'].tolist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1) Add a new column 'Size' to the Dataframe df3 which sums up the Height, Length, and Width for each row"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2) Calculate the summary statistics of the column 'Size', e.g. count, mean, standard deviation, minimum, 1st quartile, median, 3rd quartile, and maximum"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Disp</th>\n",
       "      <th>Disp2</th>\n",
       "      <th>Eng.Rev</th>\n",
       "      <th>Front.Hd</th>\n",
       "      <th>Frt.Leg.Room</th>\n",
       "      <th>Frt.Shld</th>\n",
       "      <th>Gear.Ratio</th>\n",
       "      <th>Gear2</th>\n",
       "      <th>HP</th>\n",
       "      <th>...</th>\n",
       "      <th>Steering</th>\n",
       "      <th>Tank</th>\n",
       "      <th>Tires</th>\n",
       "      <th>Trans1</th>\n",
       "      <th>Trans2</th>\n",
       "      <th>Turning</th>\n",
       "      <th>Type</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Wheel.base</th>\n",
       "      <th>Width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acura Integra</th>\n",
       "      <td>Japan</td>\n",
       "      <td>112.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3.26</td>\n",
       "      <td>3.21</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>13.2</td>\n",
       "      <td>195/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>2700.0</td>\n",
       "      <td>102</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acura Legend</th>\n",
       "      <td>Japan</td>\n",
       "      <td>163.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2505.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>55.5</td>\n",
       "      <td>2.95</td>\n",
       "      <td>3.02</td>\n",
       "      <td>160.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>18.0</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>42.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3265.0</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 100</th>\n",
       "      <td>Germany</td>\n",
       "      <td>141.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2775.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>56.5</td>\n",
       "      <td>3.27</td>\n",
       "      <td>3.25</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>21.1</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>106</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 80</th>\n",
       "      <td>Germany</td>\n",
       "      <td>121.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2835.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.5</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3.25</td>\n",
       "      <td>108.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>15.9</td>\n",
       "      <td>175/70</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2670.0</td>\n",
       "      <td>100</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMW 325i</th>\n",
       "      <td>Germany</td>\n",
       "      <td>152.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2625.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>3.02</td>\n",
       "      <td>2.99</td>\n",
       "      <td>168.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>16.4</td>\n",
       "      <td>195/65</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2895.0</td>\n",
       "      <td>101</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country   Disp  Disp2  Eng.Rev  Front.Hd  Frt.Leg.Room  \\\n",
       "Acura Integra    Japan  112.0    1.8   2935.0       3.5          41.5   \n",
       "Acura Legend     Japan  163.0    2.7   2505.0       2.0          41.5   \n",
       "Audi 100       Germany  141.0    2.3   2775.0       2.5          41.5   \n",
       "Audi 80        Germany  121.0    2.0   2835.0       4.0          42.0   \n",
       "BMW 325i       Germany  152.0    2.5   2625.0       2.0          42.0   \n",
       "\n",
       "               Frt.Shld  Gear.Ratio  Gear2     HP  ...    Steering  Tank  \\\n",
       "Acura Integra      53.0        3.26   3.21  130.0  ...       power  13.2   \n",
       "Acura Legend       55.5        2.95   3.02  160.0  ...       power  18.0   \n",
       "Audi 100           56.5        3.27   3.25  130.0  ...       power  21.1   \n",
       "Audi 80            52.5        3.25   3.25  108.0  ...       power  15.9   \n",
       "BMW 325i           52.0        3.02   2.99  168.0  ...       power  16.4   \n",
       "\n",
       "                Tires  Trans1  Trans2 Turning     Type  Weight  Wheel.base  \\\n",
       "Acura Integra  195/60   man.5  auto.4    37.0    Small  2700.0         102   \n",
       "Acura Legend   205/60   man.5  auto.4    42.0   Medium  3265.0         109   \n",
       "Audi 100       205/60   man.5  auto.3    39.0   Medium  2935.0         106   \n",
       "Audi 80        175/70   man.5  auto.3    35.0  Compact  2670.0         100   \n",
       "BMW 325i       195/65   man.5  auto.4    35.0  Compact  2895.0         101   \n",
       "\n",
       "               Width  \n",
       "Acura Integra     67  \n",
       "Acura Legend      69  \n",
       "Audi 100          71  \n",
       "Audi 80           67  \n",
       "BMW 325i          65  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pydataset import data\n",
    "import pandas as pd\n",
    "df3 = data('car90')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Height</th>\n",
       "      <th>Width</th>\n",
       "      <th>Length</th>\n",
       "      <th>Size</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acura Integra</th>\n",
       "      <td>47.5</td>\n",
       "      <td>67</td>\n",
       "      <td>177</td>\n",
       "      <td>291.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acura Legend</th>\n",
       "      <td>50.0</td>\n",
       "      <td>69</td>\n",
       "      <td>191</td>\n",
       "      <td>310.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 100</th>\n",
       "      <td>51.5</td>\n",
       "      <td>71</td>\n",
       "      <td>193</td>\n",
       "      <td>315.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 80</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>176</td>\n",
       "      <td>293.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMW 325i</th>\n",
       "      <td>49.5</td>\n",
       "      <td>65</td>\n",
       "      <td>175</td>\n",
       "      <td>289.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMW 535i</th>\n",
       "      <td>51.0</td>\n",
       "      <td>69</td>\n",
       "      <td>186</td>\n",
       "      <td>306.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buick Century</th>\n",
       "      <td>49.5</td>\n",
       "      <td>69</td>\n",
       "      <td>189</td>\n",
       "      <td>307.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buick Electra</th>\n",
       "      <td>50.5</td>\n",
       "      <td>72</td>\n",
       "      <td>197</td>\n",
       "      <td>319.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buick Le Sabre</th>\n",
       "      <td>51.0</td>\n",
       "      <td>72</td>\n",
       "      <td>197</td>\n",
       "      <td>320.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buick Regal</th>\n",
       "      <td>50.5</td>\n",
       "      <td>71</td>\n",
       "      <td>192</td>\n",
       "      <td>313.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Buick Riviera</th>\n",
       "      <td>48.5</td>\n",
       "      <td>73</td>\n",
       "      <td>198</td>\n",
       "      <td>319.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac Brougham</th>\n",
       "      <td>52.5</td>\n",
       "      <td>77</td>\n",
       "      <td>221</td>\n",
       "      <td>350.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac De Ville</th>\n",
       "      <td>51.0</td>\n",
       "      <td>73</td>\n",
       "      <td>206</td>\n",
       "      <td>330.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac Eldorado</th>\n",
       "      <td>49.0</td>\n",
       "      <td>72</td>\n",
       "      <td>191</td>\n",
       "      <td>312.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cadillac Seville</th>\n",
       "      <td>49.0</td>\n",
       "      <td>72</td>\n",
       "      <td>191</td>\n",
       "      <td>312.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Astro</th>\n",
       "      <td>68.5</td>\n",
       "      <td>77</td>\n",
       "      <td>177</td>\n",
       "      <td>322.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Beretta</th>\n",
       "      <td>49.0</td>\n",
       "      <td>68</td>\n",
       "      <td>187</td>\n",
       "      <td>304.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Camaro</th>\n",
       "      <td>46.5</td>\n",
       "      <td>73</td>\n",
       "      <td>192</td>\n",
       "      <td>311.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Caprice</th>\n",
       "      <td>52.5</td>\n",
       "      <td>75</td>\n",
       "      <td>212</td>\n",
       "      <td>339.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Cavalier</th>\n",
       "      <td>50.0</td>\n",
       "      <td>66</td>\n",
       "      <td>179</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Corsica</th>\n",
       "      <td>51.0</td>\n",
       "      <td>68</td>\n",
       "      <td>183</td>\n",
       "      <td>302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Corvette</th>\n",
       "      <td>43.5</td>\n",
       "      <td>71</td>\n",
       "      <td>177</td>\n",
       "      <td>291.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Lumina</th>\n",
       "      <td>51.0</td>\n",
       "      <td>71</td>\n",
       "      <td>198</td>\n",
       "      <td>320.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chevrolet Lumina APV</th>\n",
       "      <td>60.0</td>\n",
       "      <td>74</td>\n",
       "      <td>194</td>\n",
       "      <td>328.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chrysler Imperial</th>\n",
       "      <td>51.0</td>\n",
       "      <td>69</td>\n",
       "      <td>203</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chrysler Le Baron</th>\n",
       "      <td>51.0</td>\n",
       "      <td>68</td>\n",
       "      <td>183</td>\n",
       "      <td>302.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chrysler Le Baron Coupe</th>\n",
       "      <td>49.0</td>\n",
       "      <td>69</td>\n",
       "      <td>185</td>\n",
       "      <td>303.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Caravan</th>\n",
       "      <td>60.5</td>\n",
       "      <td>72</td>\n",
       "      <td>176</td>\n",
       "      <td>308.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Colt</th>\n",
       "      <td>50.0</td>\n",
       "      <td>66</td>\n",
       "      <td>159</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Daytona</th>\n",
       "      <td>47.0</td>\n",
       "      <td>69</td>\n",
       "      <td>179</td>\n",
       "      <td>295.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Dynasty</th>\n",
       "      <td>51.0</td>\n",
       "      <td>69</td>\n",
       "      <td>192</td>\n",
       "      <td>312.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Grand Caravan</th>\n",
       "      <td>61.0</td>\n",
       "      <td>72</td>\n",
       "      <td>191</td>\n",
       "      <td>324.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Omni</th>\n",
       "      <td>51.0</td>\n",
       "      <td>67</td>\n",
       "      <td>163</td>\n",
       "      <td>281.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Shadow</th>\n",
       "      <td>51.0</td>\n",
       "      <td>67</td>\n",
       "      <td>172</td>\n",
       "      <td>290.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dodge Spirit</th>\n",
       "      <td>51.0</td>\n",
       "      <td>67</td>\n",
       "      <td>181</td>\n",
       "      <td>299.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Eagle Premier</th>\n",
       "      <td>51.0</td>\n",
       "      <td>70</td>\n",
       "      <td>193</td>\n",
       "      <td>314.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Eagle Summit</th>\n",
       "      <td>49.5</td>\n",
       "      <td>66</td>\n",
       "      <td>170</td>\n",
       "      <td>285.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Aerostar</th>\n",
       "      <td>66.5</td>\n",
       "      <td>72</td>\n",
       "      <td>175</td>\n",
       "      <td>313.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Escort</th>\n",
       "      <td>51.5</td>\n",
       "      <td>66</td>\n",
       "      <td>169</td>\n",
       "      <td>286.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Festiva</th>\n",
       "      <td>52.0</td>\n",
       "      <td>63</td>\n",
       "      <td>141</td>\n",
       "      <td>256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford LTD Crown Victoria</th>\n",
       "      <td>52.0</td>\n",
       "      <td>78</td>\n",
       "      <td>211</td>\n",
       "      <td>341.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Mustang</th>\n",
       "      <td>49.0</td>\n",
       "      <td>68</td>\n",
       "      <td>180</td>\n",
       "      <td>297.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Probe</th>\n",
       "      <td>47.0</td>\n",
       "      <td>68</td>\n",
       "      <td>177</td>\n",
       "      <td>292.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Taurus</th>\n",
       "      <td>50.5</td>\n",
       "      <td>71</td>\n",
       "      <td>188</td>\n",
       "      <td>309.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Tempo</th>\n",
       "      <td>49.5</td>\n",
       "      <td>68</td>\n",
       "      <td>177</td>\n",
       "      <td>294.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ford Thunderbird</th>\n",
       "      <td>49.0</td>\n",
       "      <td>73</td>\n",
       "      <td>199</td>\n",
       "      <td>321.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO Metro</th>\n",
       "      <td>48.5</td>\n",
       "      <td>63</td>\n",
       "      <td>150</td>\n",
       "      <td>261.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO Prizm</th>\n",
       "      <td>49.5</td>\n",
       "      <td>65</td>\n",
       "      <td>171</td>\n",
       "      <td>285.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>GEO Storm</th>\n",
       "      <td>46.5</td>\n",
       "      <td>67</td>\n",
       "      <td>163</td>\n",
       "      <td>276.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Honda Accord</th>\n",
       "      <td>49.5</td>\n",
       "      <td>68</td>\n",
       "      <td>185</td>\n",
       "      <td>302.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Honda Civic</th>\n",
       "      <td>48.0</td>\n",
       "      <td>67</td>\n",
       "      <td>169</td>\n",
       "      <td>284.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Honda Civic CRX</th>\n",
       "      <td>45.0</td>\n",
       "      <td>66</td>\n",
       "      <td>149</td>\n",
       "      <td>260.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Honda Prelude</th>\n",
       "      <td>47.0</td>\n",
       "      <td>67</td>\n",
       "      <td>178</td>\n",
       "      <td>292.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hyundai Excel</th>\n",
       "      <td>50.0</td>\n",
       "      <td>63</td>\n",
       "      <td>168</td>\n",
       "      <td>281.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hyundai Sonata</th>\n",
       "      <td>50.5</td>\n",
       "      <td>69</td>\n",
       "      <td>184</td>\n",
       "      <td>303.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Infiniti Q45</th>\n",
       "      <td>50.5</td>\n",
       "      <td>72</td>\n",
       "      <td>200</td>\n",
       "      <td>322.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lexus LS400</th>\n",
       "      <td>50.5</td>\n",
       "      <td>72</td>\n",
       "      <td>197</td>\n",
       "      <td>319.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln Continental</th>\n",
       "      <td>50.5</td>\n",
       "      <td>73</td>\n",
       "      <td>205</td>\n",
       "      <td>328.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln Mark VII</th>\n",
       "      <td>49.0</td>\n",
       "      <td>71</td>\n",
       "      <td>203</td>\n",
       "      <td>323.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lincoln Town Car</th>\n",
       "      <td>53.0</td>\n",
       "      <td>78</td>\n",
       "      <td>220</td>\n",
       "      <td>351.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda 323</th>\n",
       "      <td>49.5</td>\n",
       "      <td>66</td>\n",
       "      <td>164</td>\n",
       "      <td>279.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda 626</th>\n",
       "      <td>49.5</td>\n",
       "      <td>67</td>\n",
       "      <td>179</td>\n",
       "      <td>295.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda 929</th>\n",
       "      <td>51.0</td>\n",
       "      <td>68</td>\n",
       "      <td>194</td>\n",
       "      <td>313.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda MPV</th>\n",
       "      <td>61.5</td>\n",
       "      <td>72</td>\n",
       "      <td>176</td>\n",
       "      <td>309.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda MX-5 Miata</th>\n",
       "      <td>43.5</td>\n",
       "      <td>66</td>\n",
       "      <td>155</td>\n",
       "      <td>264.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda MX-6</th>\n",
       "      <td>48.5</td>\n",
       "      <td>67</td>\n",
       "      <td>177</td>\n",
       "      <td>292.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda Protege</th>\n",
       "      <td>49.0</td>\n",
       "      <td>66</td>\n",
       "      <td>172</td>\n",
       "      <td>287.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mazda RX7</th>\n",
       "      <td>45.5</td>\n",
       "      <td>67</td>\n",
       "      <td>170</td>\n",
       "      <td>282.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mercedes-Benz 190</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>175</td>\n",
       "      <td>292.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mercedes-Benz 300E</th>\n",
       "      <td>52.0</td>\n",
       "      <td>69</td>\n",
       "      <td>187</td>\n",
       "      <td>308.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mercury Tracer</th>\n",
       "      <td>49.0</td>\n",
       "      <td>65</td>\n",
       "      <td>162</td>\n",
       "      <td>276.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mitsubishi Galant</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>184</td>\n",
       "      <td>301.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mitsubishi Precis</th>\n",
       "      <td>50.0</td>\n",
       "      <td>63</td>\n",
       "      <td>161</td>\n",
       "      <td>274.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mitsubishi Sigma</th>\n",
       "      <td>49.5</td>\n",
       "      <td>67</td>\n",
       "      <td>186</td>\n",
       "      <td>302.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mitsubishi Wagon</th>\n",
       "      <td>65.5</td>\n",
       "      <td>67</td>\n",
       "      <td>175</td>\n",
       "      <td>307.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan 240SX</th>\n",
       "      <td>46.5</td>\n",
       "      <td>67</td>\n",
       "      <td>178</td>\n",
       "      <td>291.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan 300ZX</th>\n",
       "      <td>45.0</td>\n",
       "      <td>71</td>\n",
       "      <td>170</td>\n",
       "      <td>286.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Axxess</th>\n",
       "      <td>58.0</td>\n",
       "      <td>67</td>\n",
       "      <td>172</td>\n",
       "      <td>297.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Maxima</th>\n",
       "      <td>49.5</td>\n",
       "      <td>69</td>\n",
       "      <td>188</td>\n",
       "      <td>306.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Pulsar NX</th>\n",
       "      <td>46.0</td>\n",
       "      <td>66</td>\n",
       "      <td>167</td>\n",
       "      <td>279.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Sentra</th>\n",
       "      <td>49.0</td>\n",
       "      <td>65</td>\n",
       "      <td>172</td>\n",
       "      <td>286.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Stanza</th>\n",
       "      <td>49.5</td>\n",
       "      <td>67</td>\n",
       "      <td>180</td>\n",
       "      <td>296.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Nissan Van</th>\n",
       "      <td>65.5</td>\n",
       "      <td>67</td>\n",
       "      <td>178</td>\n",
       "      <td>310.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Peugeot 405</th>\n",
       "      <td>51.0</td>\n",
       "      <td>68</td>\n",
       "      <td>175</td>\n",
       "      <td>294.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Peugeot 505</th>\n",
       "      <td>52.0</td>\n",
       "      <td>68</td>\n",
       "      <td>181</td>\n",
       "      <td>301.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Plymouth Laser</th>\n",
       "      <td>47.0</td>\n",
       "      <td>67</td>\n",
       "      <td>171</td>\n",
       "      <td>285.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pontiac Bonneville</th>\n",
       "      <td>50.5</td>\n",
       "      <td>72</td>\n",
       "      <td>199</td>\n",
       "      <td>321.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pontiac Grand Am</th>\n",
       "      <td>48.5</td>\n",
       "      <td>67</td>\n",
       "      <td>180</td>\n",
       "      <td>295.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pontiac LeMans</th>\n",
       "      <td>50.0</td>\n",
       "      <td>66</td>\n",
       "      <td>172</td>\n",
       "      <td>288.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porsche 944</th>\n",
       "      <td>46.0</td>\n",
       "      <td>68</td>\n",
       "      <td>169</td>\n",
       "      <td>283.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saab 900</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>184</td>\n",
       "      <td>301.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Saab 9000</th>\n",
       "      <td>52.0</td>\n",
       "      <td>69</td>\n",
       "      <td>188</td>\n",
       "      <td>309.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sterling 827</th>\n",
       "      <td>50.0</td>\n",
       "      <td>68</td>\n",
       "      <td>189</td>\n",
       "      <td>307.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subaru Justy</th>\n",
       "      <td>50.5</td>\n",
       "      <td>60</td>\n",
       "      <td>146</td>\n",
       "      <td>256.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subaru Legacy</th>\n",
       "      <td>49.0</td>\n",
       "      <td>67</td>\n",
       "      <td>178</td>\n",
       "      <td>294.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subaru Loyale</th>\n",
       "      <td>49.0</td>\n",
       "      <td>65</td>\n",
       "      <td>175</td>\n",
       "      <td>289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Subaru XT</th>\n",
       "      <td>46.0</td>\n",
       "      <td>67</td>\n",
       "      <td>178</td>\n",
       "      <td>291.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Camry</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>182</td>\n",
       "      <td>299.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Celica</th>\n",
       "      <td>47.0</td>\n",
       "      <td>69</td>\n",
       "      <td>174</td>\n",
       "      <td>290.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Corolla</th>\n",
       "      <td>49.5</td>\n",
       "      <td>65</td>\n",
       "      <td>170</td>\n",
       "      <td>284.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Cressida</th>\n",
       "      <td>50.5</td>\n",
       "      <td>67</td>\n",
       "      <td>190</td>\n",
       "      <td>307.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Supra</th>\n",
       "      <td>46.5</td>\n",
       "      <td>69</td>\n",
       "      <td>182</td>\n",
       "      <td>297.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Toyota Tercel</th>\n",
       "      <td>49.5</td>\n",
       "      <td>64</td>\n",
       "      <td>167</td>\n",
       "      <td>280.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen Corrado</th>\n",
       "      <td>47.0</td>\n",
       "      <td>66</td>\n",
       "      <td>159</td>\n",
       "      <td>272.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen Fox</th>\n",
       "      <td>49.5</td>\n",
       "      <td>63</td>\n",
       "      <td>163</td>\n",
       "      <td>275.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen GTI</th>\n",
       "      <td>50.5</td>\n",
       "      <td>66</td>\n",
       "      <td>158</td>\n",
       "      <td>274.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen Golf</th>\n",
       "      <td>51.0</td>\n",
       "      <td>66</td>\n",
       "      <td>158</td>\n",
       "      <td>275.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen Jetta</th>\n",
       "      <td>51.0</td>\n",
       "      <td>66</td>\n",
       "      <td>172</td>\n",
       "      <td>289.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volkswagen Vanagon</th>\n",
       "      <td>70.5</td>\n",
       "      <td>73</td>\n",
       "      <td>180</td>\n",
       "      <td>323.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volvo 240</th>\n",
       "      <td>52.5</td>\n",
       "      <td>67</td>\n",
       "      <td>190</td>\n",
       "      <td>309.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volvo 740</th>\n",
       "      <td>50.5</td>\n",
       "      <td>69</td>\n",
       "      <td>188</td>\n",
       "      <td>307.5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         Height  Width  Length   Size\n",
       "Acura Integra              47.5     67     177  291.5\n",
       "Acura Legend               50.0     69     191  310.0\n",
       "Audi 100                   51.5     71     193  315.5\n",
       "Audi 80                    50.5     67     176  293.5\n",
       "BMW 325i                   49.5     65     175  289.5\n",
       "BMW 535i                   51.0     69     186  306.0\n",
       "Buick Century              49.5     69     189  307.5\n",
       "Buick Electra              50.5     72     197  319.5\n",
       "Buick Le Sabre             51.0     72     197  320.0\n",
       "Buick Regal                50.5     71     192  313.5\n",
       "Buick Riviera              48.5     73     198  319.5\n",
       "Cadillac Brougham          52.5     77     221  350.5\n",
       "Cadillac De Ville          51.0     73     206  330.0\n",
       "Cadillac Eldorado          49.0     72     191  312.0\n",
       "Cadillac Seville           49.0     72     191  312.0\n",
       "Chevrolet Astro            68.5     77     177  322.5\n",
       "Chevrolet Beretta          49.0     68     187  304.0\n",
       "Chevrolet Camaro           46.5     73     192  311.5\n",
       "Chevrolet Caprice          52.5     75     212  339.5\n",
       "Chevrolet Cavalier         50.0     66     179  295.0\n",
       "Chevrolet Corsica          51.0     68     183  302.0\n",
       "Chevrolet Corvette         43.5     71     177  291.5\n",
       "Chevrolet Lumina           51.0     71     198  320.0\n",
       "Chevrolet Lumina APV       60.0     74     194  328.0\n",
       "Chrysler Imperial          51.0     69     203  323.0\n",
       "Chrysler Le Baron          51.0     68     183  302.0\n",
       "Chrysler Le Baron Coupe    49.0     69     185  303.0\n",
       "Dodge Caravan              60.5     72     176  308.5\n",
       "Dodge Colt                 50.0     66     159  275.0\n",
       "Dodge Daytona              47.0     69     179  295.0\n",
       "Dodge Dynasty              51.0     69     192  312.0\n",
       "Dodge Grand Caravan        61.0     72     191  324.0\n",
       "Dodge Omni                 51.0     67     163  281.0\n",
       "Dodge Shadow               51.0     67     172  290.0\n",
       "Dodge Spirit               51.0     67     181  299.0\n",
       "Eagle Premier              51.0     70     193  314.0\n",
       "Eagle Summit               49.5     66     170  285.5\n",
       "Ford Aerostar              66.5     72     175  313.5\n",
       "Ford Escort                51.5     66     169  286.5\n",
       "Ford Festiva               52.0     63     141  256.0\n",
       "Ford LTD Crown Victoria    52.0     78     211  341.0\n",
       "Ford Mustang               49.0     68     180  297.0\n",
       "Ford Probe                 47.0     68     177  292.0\n",
       "Ford Taurus                50.5     71     188  309.5\n",
       "Ford Tempo                 49.5     68     177  294.5\n",
       "Ford Thunderbird           49.0     73     199  321.0\n",
       "GEO Metro                  48.5     63     150  261.5\n",
       "GEO Prizm                  49.5     65     171  285.5\n",
       "GEO Storm                  46.5     67     163  276.5\n",
       "Honda Accord               49.5     68     185  302.5\n",
       "Honda Civic                48.0     67     169  284.0\n",
       "Honda Civic CRX            45.0     66     149  260.0\n",
       "Honda Prelude              47.0     67     178  292.0\n",
       "Hyundai Excel              50.0     63     168  281.0\n",
       "Hyundai Sonata             50.5     69     184  303.5\n",
       "Infiniti Q45               50.5     72     200  322.5\n",
       "Lexus LS400                50.5     72     197  319.5\n",
       "Lincoln Continental        50.5     73     205  328.5\n",
       "Lincoln Mark VII           49.0     71     203  323.0\n",
       "Lincoln Town Car           53.0     78     220  351.0\n",
       "Mazda 323                  49.5     66     164  279.5\n",
       "Mazda 626                  49.5     67     179  295.5\n",
       "Mazda 929                  51.0     68     194  313.0\n",
       "Mazda MPV                  61.5     72     176  309.5\n",
       "Mazda MX-5 Miata           43.5     66     155  264.5\n",
       "Mazda MX-6                 48.5     67     177  292.5\n",
       "Mazda Protege              49.0     66     172  287.0\n",
       "Mazda RX7                  45.5     67     170  282.5\n",
       "Mercedes-Benz 190          50.5     67     175  292.5\n",
       "Mercedes-Benz 300E         52.0     69     187  308.0\n",
       "Mercury Tracer             49.0     65     162  276.0\n",
       "Mitsubishi Galant          50.5     67     184  301.5\n",
       "Mitsubishi Precis          50.0     63     161  274.0\n",
       "Mitsubishi Sigma           49.5     67     186  302.5\n",
       "Mitsubishi Wagon           65.5     67     175  307.5\n",
       "Nissan 240SX               46.5     67     178  291.5\n",
       "Nissan 300ZX               45.0     71     170  286.0\n",
       "Nissan Axxess              58.0     67     172  297.0\n",
       "Nissan Maxima              49.5     69     188  306.5\n",
       "Nissan Pulsar NX           46.0     66     167  279.0\n",
       "Nissan Sentra              49.0     65     172  286.0\n",
       "Nissan Stanza              49.5     67     180  296.5\n",
       "Nissan Van                 65.5     67     178  310.5\n",
       "Peugeot 405                51.0     68     175  294.0\n",
       "Peugeot 505                52.0     68     181  301.0\n",
       "Plymouth Laser             47.0     67     171  285.0\n",
       "Pontiac Bonneville         50.5     72     199  321.5\n",
       "Pontiac Grand Am           48.5     67     180  295.5\n",
       "Pontiac LeMans             50.0     66     172  288.0\n",
       "Porsche 944                46.0     68     169  283.0\n",
       "Saab 900                   50.5     67     184  301.5\n",
       "Saab 9000                  52.0     69     188  309.0\n",
       "Sterling 827               50.0     68     189  307.0\n",
       "Subaru Justy               50.5     60     146  256.5\n",
       "Subaru Legacy              49.0     67     178  294.0\n",
       "Subaru Loyale              49.0     65     175  289.0\n",
       "Subaru XT                  46.0     67     178  291.0\n",
       "Toyota Camry               50.5     67     182  299.5\n",
       "Toyota Celica              47.0     69     174  290.0\n",
       "Toyota Corolla             49.5     65     170  284.5\n",
       "Toyota Cressida            50.5     67     190  307.5\n",
       "Toyota Supra               46.5     69     182  297.5\n",
       "Toyota Tercel              49.5     64     167  280.5\n",
       "Volkswagen Corrado         47.0     66     159  272.0\n",
       "Volkswagen Fox             49.5     63     163  275.5\n",
       "Volkswagen GTI             50.5     66     158  274.5\n",
       "Volkswagen Golf            51.0     66     158  275.0\n",
       "Volkswagen Jetta           51.0     66     172  289.0\n",
       "Volkswagen Vanagon         70.5     73     180  323.5\n",
       "Volvo 240                  52.5     67     190  309.5\n",
       "Volvo 740                  50.5     69     188  307.5"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['Size']=df3['Height']+df3['Width']+df3['Length']\n",
    "df3[['Height','Width','Length','Size']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    111.000000\n",
       "mean     299.635135\n",
       "std       18.774977\n",
       "min      256.000000\n",
       "25%      286.750000\n",
       "50%      299.000000\n",
       "75%      311.750000\n",
       "max      351.000000\n",
       "Name: Size, dtype: float64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3['Size'].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 11"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Identify the row index label (i.e. the car model) for the car with the most weight in the Dataframe df3 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "initiated datasets repo at: C:\\Users\\yuthp\\.pydataset/\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country</th>\n",
       "      <th>Disp</th>\n",
       "      <th>Disp2</th>\n",
       "      <th>Eng.Rev</th>\n",
       "      <th>Front.Hd</th>\n",
       "      <th>Frt.Leg.Room</th>\n",
       "      <th>Frt.Shld</th>\n",
       "      <th>Gear.Ratio</th>\n",
       "      <th>Gear2</th>\n",
       "      <th>HP</th>\n",
       "      <th>...</th>\n",
       "      <th>Steering</th>\n",
       "      <th>Tank</th>\n",
       "      <th>Tires</th>\n",
       "      <th>Trans1</th>\n",
       "      <th>Trans2</th>\n",
       "      <th>Turning</th>\n",
       "      <th>Type</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Wheel.base</th>\n",
       "      <th>Width</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Acura Integra</th>\n",
       "      <td>Japan</td>\n",
       "      <td>112.0</td>\n",
       "      <td>1.8</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>53.0</td>\n",
       "      <td>3.26</td>\n",
       "      <td>3.21</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>13.2</td>\n",
       "      <td>195/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>37.0</td>\n",
       "      <td>Small</td>\n",
       "      <td>2700.0</td>\n",
       "      <td>102</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Acura Legend</th>\n",
       "      <td>Japan</td>\n",
       "      <td>163.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>2505.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>41.5</td>\n",
       "      <td>55.5</td>\n",
       "      <td>2.95</td>\n",
       "      <td>3.02</td>\n",
       "      <td>160.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>18.0</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>42.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>3265.0</td>\n",
       "      <td>109</td>\n",
       "      <td>69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 100</th>\n",
       "      <td>Germany</td>\n",
       "      <td>141.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>2775.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>41.5</td>\n",
       "      <td>56.5</td>\n",
       "      <td>3.27</td>\n",
       "      <td>3.25</td>\n",
       "      <td>130.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>21.1</td>\n",
       "      <td>205/60</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>39.0</td>\n",
       "      <td>Medium</td>\n",
       "      <td>2935.0</td>\n",
       "      <td>106</td>\n",
       "      <td>71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Audi 80</th>\n",
       "      <td>Germany</td>\n",
       "      <td>121.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>2835.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.5</td>\n",
       "      <td>3.25</td>\n",
       "      <td>3.25</td>\n",
       "      <td>108.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>15.9</td>\n",
       "      <td>175/70</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.3</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2670.0</td>\n",
       "      <td>100</td>\n",
       "      <td>67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BMW 325i</th>\n",
       "      <td>Germany</td>\n",
       "      <td>152.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2625.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>42.0</td>\n",
       "      <td>52.0</td>\n",
       "      <td>3.02</td>\n",
       "      <td>2.99</td>\n",
       "      <td>168.0</td>\n",
       "      <td>...</td>\n",
       "      <td>power</td>\n",
       "      <td>16.4</td>\n",
       "      <td>195/65</td>\n",
       "      <td>man.5</td>\n",
       "      <td>auto.4</td>\n",
       "      <td>35.0</td>\n",
       "      <td>Compact</td>\n",
       "      <td>2895.0</td>\n",
       "      <td>101</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country   Disp  Disp2  Eng.Rev  Front.Hd  Frt.Leg.Room  \\\n",
       "Acura Integra    Japan  112.0    1.8   2935.0       3.5          41.5   \n",
       "Acura Legend     Japan  163.0    2.7   2505.0       2.0          41.5   \n",
       "Audi 100       Germany  141.0    2.3   2775.0       2.5          41.5   \n",
       "Audi 80        Germany  121.0    2.0   2835.0       4.0          42.0   \n",
       "BMW 325i       Germany  152.0    2.5   2625.0       2.0          42.0   \n",
       "\n",
       "               Frt.Shld  Gear.Ratio  Gear2     HP  ...    Steering  Tank  \\\n",
       "Acura Integra      53.0        3.26   3.21  130.0  ...       power  13.2   \n",
       "Acura Legend       55.5        2.95   3.02  160.0  ...       power  18.0   \n",
       "Audi 100           56.5        3.27   3.25  130.0  ...       power  21.1   \n",
       "Audi 80            52.5        3.25   3.25  108.0  ...       power  15.9   \n",
       "BMW 325i           52.0        3.02   2.99  168.0  ...       power  16.4   \n",
       "\n",
       "                Tires  Trans1  Trans2 Turning     Type  Weight  Wheel.base  \\\n",
       "Acura Integra  195/60   man.5  auto.4    37.0    Small  2700.0         102   \n",
       "Acura Legend   205/60   man.5  auto.4    42.0   Medium  3265.0         109   \n",
       "Audi 100       205/60   man.5  auto.3    39.0   Medium  2935.0         106   \n",
       "Audi 80        175/70   man.5  auto.3    35.0  Compact  2670.0         100   \n",
       "BMW 325i       195/65   man.5  auto.4    35.0  Compact  2895.0         101   \n",
       "\n",
       "               Width  \n",
       "Acura Integra     67  \n",
       "Acura Legend      69  \n",
       "Audi 100          71  \n",
       "Audi 80           67  \n",
       "BMW 325i          65  \n",
       "\n",
       "[5 rows x 34 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pydataset import data\n",
    "import pandas as pd\n",
    "df3 = data('car90')\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Cadillac Brougham']\n"
     ]
    }
   ],
   "source": [
    "print(df3[df3['Weight'].isin([df3['Weight'].max()])].index.tolist())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Create a dictionary dict1 in which each key is an even number in list2 and each value is half of the corresponding key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([51, 92, 14, 71, 60, 20, 82, 86, 74, 74, 87, 99, 23,  2, 21, 52,  1,\n",
       "       87, 29, 37])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.random.seed(42)\n",
    "list2 = np.random.randint(0,100,20)\n",
    "list2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{92: 46.0,\n",
       " 14: 7.0,\n",
       " 60: 30.0,\n",
       " 20: 10.0,\n",
       " 82: 41.0,\n",
       " 86: 43.0,\n",
       " 74: 37.0,\n",
       " 2: 1.0,\n",
       " 52: 26.0}"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict1={}\n",
    "for x in list2:\n",
    "    if x%2 == 0:\n",
    "        dict1[x]=x/2\n",
    "dict1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 13"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Replace the missing values in the Dataframe df4 with the average value in each corresponding column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Value1</th>\n",
       "      <th>Value2</th>\n",
       "      <th>Value3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>84.0</td>\n",
       "      <td>83.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>78.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>82.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>73.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D</td>\n",
       "      <td>72.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>77.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>68.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>B</td>\n",
       "      <td>90.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>90.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>89.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>D</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Category  Value1  Value2  Value3\n",
       "0        A     NaN    84.0    83.0\n",
       "1        B    78.0     NaN    69.0\n",
       "2        C    82.0    81.0    73.0\n",
       "3        D    72.0    74.0    77.0\n",
       "4        A     NaN    68.0     NaN\n",
       "5        B    90.0     NaN    90.0\n",
       "6        C     NaN     NaN    89.0\n",
       "7        D    87.0    91.0    74.0"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd, numpy as np\n",
    "sample_data = {'Category': ['A', 'B', 'C', 'D'] * 2\n",
    "               , 'Value1': [np.nan, 78, 82, 72, np.nan, 90, np.nan, 87]\n",
    "               , 'Value2': [84, np.nan, 81, 74, 68, np.nan, np.nan, 91]\n",
    "               , 'Value3': [83, 69, 73, 77, np.nan, 90, 89, 74]\n",
    "              }\n",
    "df4 = pd.DataFrame(data = sample_data)\n",
    "df4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Category</th>\n",
       "      <th>Value1</th>\n",
       "      <th>Value2</th>\n",
       "      <th>Value3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A</td>\n",
       "      <td>81.8</td>\n",
       "      <td>84.0</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>B</td>\n",
       "      <td>78.0</td>\n",
       "      <td>79.6</td>\n",
       "      <td>69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>C</td>\n",
       "      <td>82.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>D</td>\n",
       "      <td>72.0</td>\n",
       "      <td>74.0</td>\n",
       "      <td>77.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>A</td>\n",
       "      <td>81.8</td>\n",
       "      <td>68.0</td>\n",
       "      <td>79.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>B</td>\n",
       "      <td>90.0</td>\n",
       "      <td>79.6</td>\n",
       "      <td>90.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>C</td>\n",
       "      <td>81.8</td>\n",
       "      <td>79.6</td>\n",
       "      <td>89.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>D</td>\n",
       "      <td>87.0</td>\n",
       "      <td>91.0</td>\n",
       "      <td>74.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Category  Value1  Value2     Value3\n",
       "0        A    81.8    84.0  83.000000\n",
       "1        B    78.0    79.6  69.000000\n",
       "2        C    82.0    81.0  73.000000\n",
       "3        D    72.0    74.0  77.000000\n",
       "4        A    81.8    68.0  79.285714\n",
       "5        B    90.0    79.6  90.000000\n",
       "6        C    81.8    79.6  89.000000\n",
       "7        D    87.0    91.0  74.000000"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df4.fillna(df4.mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 14"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Write a function named isPhoneNumber() to check whether a given string is a phone number with the same pattern as '919-684-2200'. Return True if the patterns match. Otherwise, return False."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<re.Match object; span=(0, 12), match='919-564-8243'>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def isPhoneNumber(string):\n",
    "    import re \n",
    "    pattern=\"[0-9][0-9][0-9]-[0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]\"\n",
    "    return re.search(pattern,string)\n",
    "isPhoneNumber(\"919-564-8243\")\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The copy() method is often used to create a copy of a list so that changing the values in the copy doesn't change the values in the original list (see the example as below)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 1 2 3 4]\n",
      "[100   1   2   3   4]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import copy\n",
    "arr = np.arange(5)\n",
    "arr_copy = copy.copy(arr)\n",
    "arr_copy[0] = 100\n",
    "print(arr)\n",
    "print(arr_copy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, when the original list is a nested list, the copy() method doesn't function as expected, i.e. changing the values in the copy may change the values in the original list as well (see the example as below)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[111, 200, 300], 1, 2, 3, 4]\n",
      "[[111, 200, 300], 1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "arr = [[100,200,300], 1, 2, 3, 4]\n",
    "arr_copy = copy.copy(arr)\n",
    "arr_copy[0][0] = 111\n",
    "print(arr)\n",
    "print(arr_copy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finish the following code and create a more *advanced* copy of the original list, so that the values in the original list won't change when we change the values in the copy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[100, 200, 300], 1, 2, 3, 4]\n",
      "[[111, 200, 300], 1, 2, 3, 4]\n"
     ]
    }
   ],
   "source": [
    "arr = [[100,200,300], 1, 2, 3, 4]\n",
    "arr_copy = copy.deepcopy(arr)\n",
    "arr_copy[0][0] = 111\n",
    "print(arr)\n",
    "print(arr_copy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Non-Coding Questions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 16"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's the main difference between the \"==\" and \"is\" operations?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#The is function checks that whether both the operands refer to the same memory location whereas '==' function directly compares and checks the value of the two operands,"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 17"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's the main difference between the append() and insert() list methods?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#By using the insert command you can choose the position in which you want to insert the element in , whereas in the append command you cannot choose the position where the element will be added."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 18"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's the main difference between the pass and continue statements?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#When the continue statement is executed ,the control is passed to the next element of the loop, whereas when continue is used it passes to the next iteration in the loop."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 19"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's the main difference between a list and a dictionary?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#A dictionary has keys and value pairs which are used to store data.A list has index value assigned to its \n",
    "#elements through which they can be accessed and mutated."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 20"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What's the return value of a call to a function which doesn't have a return statement?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "#It will not return a value /The value will be null.\n",
    "\n",
    "def to_cub(x):\n",
    "    x=x**2\n",
    "to_cub(11)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
