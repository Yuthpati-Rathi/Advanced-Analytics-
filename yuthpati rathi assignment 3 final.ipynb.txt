{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# EGRMGMT 590.10 Homework 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Due at 6:15pm ET on Thursday, February 21*"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Instructions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ There are 16 exercises in total. Exercise 1 through 14 require coding. Your grades are based on the accuracy of the results, not the code execution speed.\n",
    "  + Exercise 1 to 7, 10, 11, 13, 15 and 16: each is worth 0.5 points. \n",
    "  + Exercise 8, 9, 12 and 14: 1 point.\n",
    "+ Exercise 8 and 9 require to create the curves **from scratch** without relying on scikit-learn, Scikit-plot, or any other modules with functions or capabilities to \"plug-in and plot\" those curves.\n",
    "+ Exercises are dependent on prior exercises. Please work on them in the pre-determined order.\n",
    "+ Submit the .ipynb file to Sakai before 6:15pm ET on Thursday, February 21.\n",
    "+ Assignments handed in late will lose 1 point every 24-hour window after 6:15pm ET on Thursday, February 21."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Dataset Information:**\n",
    "\n",
    "We'll be working on a breast cancer dataset containing 569 samples of malignant and benign tumor cells. Features are computed from a digitized image of a fine needle aspirate (FNA) of a breast mass. They describe characteristics of the cell nuclei present in the image.\n",
    "\n",
    "+ 1st column: ID number \n",
    "+ 2nd column: Diagnosis (M = malignant, B = benign) \n",
    "+ 3rd - 32th columns: 30 numerical features computed for each cell nucleus\n",
    "\n",
    "**Dataset Source:**\n",
    "https://archive.ics.uci.edu/ml/datasets/breast+cancer+wisconsin+(Diagnostic)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Exercise Overview**\n",
    "\n",
    "+ We'll conduct classification analysis using the 30 numerical features to predict the likelihood that a given sample is malignant or benign. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 1 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Read the breast cancer dataset from its URL (https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data)\n",
    "+ Keep the 30 numerical features in a NumPy array X\n",
    "+ Use sklearn to encode the diagnosis labels (i.e. 'M' and 'B') to integers (i.e. 1 and 0) and keep the results in a NumPy array y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>...</th>\n",
       "      <th>22</th>\n",
       "      <th>23</th>\n",
       "      <th>24</th>\n",
       "      <th>25</th>\n",
       "      <th>26</th>\n",
       "      <th>27</th>\n",
       "      <th>28</th>\n",
       "      <th>29</th>\n",
       "      <th>30</th>\n",
       "      <th>31</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>842302</td>\n",
       "      <td>M</td>\n",
       "      <td>17.99</td>\n",
       "      <td>10.38</td>\n",
       "      <td>122.80</td>\n",
       "      <td>1001.0</td>\n",
       "      <td>0.11840</td>\n",
       "      <td>0.27760</td>\n",
       "      <td>0.3001</td>\n",
       "      <td>0.14710</td>\n",
       "      <td>...</td>\n",
       "      <td>25.38</td>\n",
       "      <td>17.33</td>\n",
       "      <td>184.60</td>\n",
       "      <td>2019.0</td>\n",
       "      <td>0.1622</td>\n",
       "      <td>0.6656</td>\n",
       "      <td>0.7119</td>\n",
       "      <td>0.2654</td>\n",
       "      <td>0.4601</td>\n",
       "      <td>0.11890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>842517</td>\n",
       "      <td>M</td>\n",
       "      <td>20.57</td>\n",
       "      <td>17.77</td>\n",
       "      <td>132.90</td>\n",
       "      <td>1326.0</td>\n",
       "      <td>0.08474</td>\n",
       "      <td>0.07864</td>\n",
       "      <td>0.0869</td>\n",
       "      <td>0.07017</td>\n",
       "      <td>...</td>\n",
       "      <td>24.99</td>\n",
       "      <td>23.41</td>\n",
       "      <td>158.80</td>\n",
       "      <td>1956.0</td>\n",
       "      <td>0.1238</td>\n",
       "      <td>0.1866</td>\n",
       "      <td>0.2416</td>\n",
       "      <td>0.1860</td>\n",
       "      <td>0.2750</td>\n",
       "      <td>0.08902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>84300903</td>\n",
       "      <td>M</td>\n",
       "      <td>19.69</td>\n",
       "      <td>21.25</td>\n",
       "      <td>130.00</td>\n",
       "      <td>1203.0</td>\n",
       "      <td>0.10960</td>\n",
       "      <td>0.15990</td>\n",
       "      <td>0.1974</td>\n",
       "      <td>0.12790</td>\n",
       "      <td>...</td>\n",
       "      <td>23.57</td>\n",
       "      <td>25.53</td>\n",
       "      <td>152.50</td>\n",
       "      <td>1709.0</td>\n",
       "      <td>0.1444</td>\n",
       "      <td>0.4245</td>\n",
       "      <td>0.4504</td>\n",
       "      <td>0.2430</td>\n",
       "      <td>0.3613</td>\n",
       "      <td>0.08758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>84348301</td>\n",
       "      <td>M</td>\n",
       "      <td>11.42</td>\n",
       "      <td>20.38</td>\n",
       "      <td>77.58</td>\n",
       "      <td>386.1</td>\n",
       "      <td>0.14250</td>\n",
       "      <td>0.28390</td>\n",
       "      <td>0.2414</td>\n",
       "      <td>0.10520</td>\n",
       "      <td>...</td>\n",
       "      <td>14.91</td>\n",
       "      <td>26.50</td>\n",
       "      <td>98.87</td>\n",
       "      <td>567.7</td>\n",
       "      <td>0.2098</td>\n",
       "      <td>0.8663</td>\n",
       "      <td>0.6869</td>\n",
       "      <td>0.2575</td>\n",
       "      <td>0.6638</td>\n",
       "      <td>0.17300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>84358402</td>\n",
       "      <td>M</td>\n",
       "      <td>20.29</td>\n",
       "      <td>14.34</td>\n",
       "      <td>135.10</td>\n",
       "      <td>1297.0</td>\n",
       "      <td>0.10030</td>\n",
       "      <td>0.13280</td>\n",
       "      <td>0.1980</td>\n",
       "      <td>0.10430</td>\n",
       "      <td>...</td>\n",
       "      <td>22.54</td>\n",
       "      <td>16.67</td>\n",
       "      <td>152.20</td>\n",
       "      <td>1575.0</td>\n",
       "      <td>0.1374</td>\n",
       "      <td>0.2050</td>\n",
       "      <td>0.4000</td>\n",
       "      <td>0.1625</td>\n",
       "      <td>0.2364</td>\n",
       "      <td>0.07678</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         0  1      2      3       4       5        6        7       8   \\\n",
       "0    842302  M  17.99  10.38  122.80  1001.0  0.11840  0.27760  0.3001   \n",
       "1    842517  M  20.57  17.77  132.90  1326.0  0.08474  0.07864  0.0869   \n",
       "2  84300903  M  19.69  21.25  130.00  1203.0  0.10960  0.15990  0.1974   \n",
       "3  84348301  M  11.42  20.38   77.58   386.1  0.14250  0.28390  0.2414   \n",
       "4  84358402  M  20.29  14.34  135.10  1297.0  0.10030  0.13280  0.1980   \n",
       "\n",
       "        9    ...        22     23      24      25      26      27      28  \\\n",
       "0  0.14710   ...     25.38  17.33  184.60  2019.0  0.1622  0.6656  0.7119   \n",
       "1  0.07017   ...     24.99  23.41  158.80  1956.0  0.1238  0.1866  0.2416   \n",
       "2  0.12790   ...     23.57  25.53  152.50  1709.0  0.1444  0.4245  0.4504   \n",
       "3  0.10520   ...     14.91  26.50   98.87   567.7  0.2098  0.8663  0.6869   \n",
       "4  0.10430   ...     22.54  16.67  152.20  1575.0  0.1374  0.2050  0.4000   \n",
       "\n",
       "       29      30       31  \n",
       "0  0.2654  0.4601  0.11890  \n",
       "1  0.1860  0.2750  0.08902  \n",
       "2  0.2430  0.3613  0.08758  \n",
       "3  0.2575  0.6638  0.17300  \n",
       "4  0.1625  0.2364  0.07678  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "df=pd.read_csv(\"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/wdbc.data\", header=None)\n",
    "X=np.array(df[df.columns[df.dtypes=='float']])\n",
    "encoder = LabelEncoder()\n",
    "y=np.array(encoder.fit_transform(df.loc[:,1]))\n",
    "\n",
    "df.head(5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "class:  ndarray\n",
      "shape:  (569, 30)\n",
      "strides:  (8, 4552)\n",
      "itemsize:  8\n",
      "aligned:  True\n",
      "contiguous:  False\n",
      "fortran:  True\n",
      "data pointer: 0x20aaaa3ae60\n",
      "byteorder:  little\n",
      "byteswap:  False\n",
      "type: float64\n"
     ]
    }
   ],
   "source": [
    "np.info(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use matplotlib to create a matrix of histograms for the 30 input features\n",
    "+ Each subplot is for a unique feature and includes two histograms: one for the malignant tumors and the other for the benign tumors\n",
    "+ Observe how the distributions vary between the malignant and benign tumors "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x720 with 30 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "fig,axes =plt.subplots(10,3, figsize=(17, 10))\n",
    "\n",
    "malignant = X[y==1]\n",
    "benign=X[y==0]\n",
    "\n",
    "ax=axes.ravel()\n",
    "for i in range(30):\n",
    "  _,bins=np.histogram(X[:,i],bins=40)\n",
    "  ax[i].hist(malignant[:,i],bins=bins,color='b',alpha=.5)\n",
    "  ax[i].hist(benign[:,i],bins=bins,color='y',alpha=0.3)\n",
    "  ax[i].legend(['malignant tumors','benign tumors'],loc='best',fontsize=8)\n",
    "\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use the stratified sampling approach to split the input features X and the output variable y into training and testing sets (i.e. X_train, y_train, X_test, and y_test) at a 8:2 ratio while preserving the proportions of malignant and benign tumors in each set\n",
    "+ Compare the proportions of malignant and benign tumors among the overall, training, and testing sets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Proportion of malignant tumors with respect to  overall is \n",
      "0.37258347978910367\n",
      "\n",
      "\n",
      "The Proportion of benign tumors with respect to overall is\n",
      "0.6274165202108963\n",
      "\n",
      "\n",
      "The Proportion of malignant tumors with respect to  training is\n",
      "0.37362637362637363\n",
      "\n",
      "\n",
      "The Proportion of benign tumors with respect to training is\n",
      "0.6263736263736264\n",
      "\n",
      "\n",
      "The Proportion of malignant tumors with respect to test is\n",
      "0.3684210526315789\n",
      "\n",
      "\n",
      "The Proportion of benign tumors with respect to test is\n",
      "0.631578947368421\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedShuffleSplit\n",
    "\n",
    "split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\n",
    "for train_index, test_index in split.split(X, y):\n",
    "    X_train, X_test = X[train_index] , X[test_index]\n",
    "    y_train, y_test = y[train_index] , y[test_index]\n",
    " \n",
    "\n",
    "print( \"The Proportion of malignant tumors with respect to  overall is \")\n",
    "print(len(X[y==1])/len(X))\n",
    "print(\"\\n\")\n",
    "print(\"The Proportion of benign tumors with respect to overall is\")\n",
    "print(len(X[y==0])/len(X))\n",
    "print(\"\\n\")\n",
    "\n",
    "print(\"The Proportion of malignant tumors with respect to  training is\")\n",
    "print(len(X_train[y_train==1])/len(X_train))\n",
    "print(\"\\n\")\n",
    "print(\"The Proportion of benign tumors with respect to training is\")\n",
    "print(len(X_train[y_train==0])/len(X_train))\n",
    "print(\"\\n\")\n",
    "\n",
    "print(\"The Proportion of malignant tumors with respect to test is\")\n",
    "print(len(X_test[y_test==1])/len(X_test))\n",
    "print(\"\\n\")\n",
    "print(\"The Proportion of benign tumors with respect to test is\")\n",
    "print(len(X_test[y_test==0])/len(X_test))\n",
    "print(\"\\n\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use sklearn to create a Pipeline to process the data and build a classifier using the training dataset\n",
    "+ The Pipeline includes three sequential steps:\n",
    "  * Standardizing the 30 input features \n",
    "  * Using sklearn's PCA to reduce the 30 input features into 2 components\n",
    "  * Fitting a logistic regression model using the 2 components as input variables\n",
    "+ Apply the Pipeline to the training dataset and calculate its prediction accuracy rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "prediction accuracy rate: 0.949\n"
     ]
    }
   ],
   "source": [
    "from sklearn.pipeline import Pipeline\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "pipeline = Pipeline(steps = [('sc', StandardScaler()),\n",
    "                             ('pca', PCA(n_components = 2)),\n",
    "                             ('lr', LogisticRegression(solver = 'lbfgs'))])\n",
    "pipeline.fit(X_train, y_train)\n",
    "y_train_pred = pipeline.predict(X_train)\n",
    "print('prediction accuracy rate: %.3f' %accuracy_score(y_train, y_train_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Create a precision and recall tradeoff chart using the training dataset and its predictions based on the Pipeline created in Exercise 4\n",
    "+ Print the value of the optimal probability cut point for predicting the diagnosis outcomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "optimal probability cut point is: [0.483, 0.941]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import precision_recall_curve\n",
    "\n",
    "y_train_prob = pipeline_logist.predict_proba(X_train)\n",
    "precision, recall, threshold = precision_recall_curve(y_train, y_train_prob[:, 1])\n",
    "opt_threshold = threshold[np.where(np.sign(precision[:-1] - recall[:-1])==0)[0]]\n",
    "plt.plot(threshold, precision[:-1], label = 'Precision line',color='green')\n",
    "plt.plot(threshold, recall[:-1], label = 'Recall line',color='black')\n",
    "plt.xlabel('Threshold axis')\n",
    "plt.ylabel('Score axis')\n",
    "plt.axvline(opt_threshold, color='blue')\n",
    "plt.legend(loc = 'best')\n",
    "plt.show()\n",
    "\n",
    "for i in range(len(threshold)):\n",
    "    if precision[i] == recall[i]:\n",
    "        print(\"optimal probability cut point is: [%.3f, %.3f]\" %(threshold[i], precision[i]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 6"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Apply the Pipeline created in Exercise 4 and make predictions for the testing dataset\n",
    "+ Calculate the following model quality metrics based on the testing dataset and its predictions\n",
    "  * Confusion matrix\n",
    "  * Precision score\n",
    "  * Recall score\n",
    "  * F1 score\n",
    "  * ROC AUC score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[71,  1],\n",
       "       [ 3, 39]], dtype=int64)"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "y_test_pred = pipeline_logist.predict(X_test)\n",
    "confusion_matrix(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.975"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import precision_score\n",
    "precision_score(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9285714285714286"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import recall_score\n",
    "recall_score(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.951219512195122"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import f1_score\n",
    "f1_score(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9963624338624338"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "y_test_prob = pipeline_logist.predict_proba(X_test)\n",
    "roc_auc_score(y_test, y_test_prob[:,1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use sklearn to create two ROC curves on the same chart for the Pipeline created in Exercise 4:\n",
    "  * One ROC curve is based on the training dataset and its predictions\n",
    "  * The other ROC curve is based on the testing dataset and its predictions\n",
    "+ Assess the chances of overfitting and underfitting by comparing the two ROC curves"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training dataset AUC: 0.988\n",
      "testing dataset AUC: 0.996\n",
      "It is a good fit since the gap is small.\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve\n",
    "\n",
    "pipeline_logist.fit(X_train, y_train)\n",
    "y_train_pred = pipeline_logist.predict_proba(X_train)[:, 1]\n",
    "fpr_train, tpr_train, auc_thresholds_train = roc_curve(y_train, y_train_pred)\n",
    "plt.plot(fpr_train, tpr_train, color = 'red', label = \"training line\")\n",
    "\n",
    "pipeline_logist.fit(X_train, y_train)\n",
    "y_test_pred = pipeline_logist.predict_proba(X_test)[:, 1]\n",
    "fpr_test, tpr_test, auc_thresholds_test = roc_curve(y_test, y_test_pred)\n",
    "plt.plot(fpr_test, tpr_test, color = 'green', label = \"testing line\")\n",
    "\n",
    "plt.plot([0, 1], [0, 1], color = 'black', linestyle = '--')\n",
    "plt.title('ROC curve')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlim([-0.01, 1.01])\n",
    "plt.ylim([-0.01, 1.01])\n",
    "plt.legend(loc = 'lower right')\n",
    "plt.show()\n",
    "\n",
    "print('training dataset AUC: %.3f' %roc_auc_score(y_train, y_train_pred))\n",
    "print('testing dataset AUC: %.3f' %roc_auc_score(y_test, y_test_pred))\n",
    "print('It is a good fit since the gap is small.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 8"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Write a function plotROC(y, y_prob) to create a ROC curve from scratch:\n",
    "    * y contains the actual outcomes\n",
    "    * y_prob contains the predicted probabilities of the outcome occurring\n",
    "+ Apply the plotROC function to the testing dataset and its prediction based on the Pipeline created in Exercise 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plotROC(y, y_prob):\n",
    "    fpr = []\n",
    "    tpr = []\n",
    "    thr = np.linspace(0, 1, 1000)\n",
    "    for T in thr:\n",
    "        tp, tn, fp, fn = 0, 0, 0, 0\n",
    "        for i in range(len(y)):\n",
    "            if y[i] == 1 and y_prob[i] >= T:\n",
    "                tp += 1\n",
    "            elif y[i] == 0 and y_prob[i] < T:\n",
    "                tn += 1\n",
    "            elif y[i] == 0 and y_prob[i] >= T:\n",
    "                fp += 1\n",
    "            elif y[i] == 1 and y_prob[i] < T:\n",
    "                fn += 1\n",
    "        fpr.append(fp / (fp + tn))\n",
    "        tpr.append(tp / (tp + fn))\n",
    "    plt.plot(fpr, tpr, color = 'g')\n",
    "    plt.title('ROC curve')\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.xlim([-0.01, 1.01])\n",
    "    plt.ylim([-0.01, 1.01])\n",
    "    plt.show()\n",
    "\n",
    "pipeline.fit(X_train, y_train)\n",
    "y_test_pred = pipeline.predict_proba(X_test)[:, 1]\n",
    "plotROC(y_test, y_test_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 9"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Create a cumulative gains chart from scratch using the testing dataset and its predictions based on the Pipeline created in Exercise 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plotCGC(y, y_prob):\n",
    "    cls = [x for y, x in sorted(zip(y_prob, y))]\n",
    "    percentage = []\n",
    "    p_gain = []\n",
    "    n_gain = []\n",
    "    for i in range(len(cls)):\n",
    "        percentage.append((i + 1) / len(cls))\n",
    "        n_gain.append((i + 1 - sum(cls[:i + 1])) / (len(cls) - sum(cls)))\n",
    "    cls = cls[::-1]\n",
    "    for i in range(len(cls)):\n",
    "        p_gain.append(sum(cls[:i + 1]) / sum(cls))\n",
    "    plt.plot(percentage, p_gain, color = 'b', label = \"positive\")\n",
    "    plt.plot(percentage, n_gain, color = 'g', label = \"negative\")\n",
    "    plt.plot([0, 1], [0, 1], color = 'black', label = 'random')\n",
    "    plt.title('Cumulative gains chart')\n",
    "    plt.xlabel('Percentage')\n",
    "    plt.ylabel('Gain')\n",
    "    plt.legend(loc = 'lower right')\n",
    "    plt.show()   \n",
    "\n",
    "pipeline.fit(X_train, y_train)\n",
    "y_test_pred = pipeline.predict_proba(X_test)[:, 1]\n",
    "plotCGC(y_test, y_test_pred)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 10"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Use sklearn to create a 10-fold stratified cross-validation for the training dataset while preserving the proportions of diagnosis in each fold\n",
    "+ Re-fit the Pipeline specified in Exercise 4 via the 10-fold cross-validation on the training dataset, i.e. each iteration involves training the model on 9 folds and validating the model on the remaining 1 fold \n",
    "+ Print the accuracy rate of each of the validation fold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Accuracy of Fold 0': 0.9565217391304348,\n",
       " 'Accuracy of Fold 1': 0.9565217391304348,\n",
       " 'Accuracy of Fold 2': 0.9782608695652174,\n",
       " 'Accuracy of Fold 3': 0.9347826086956522,\n",
       " 'Accuracy of Fold 4': 0.9130434782608695,\n",
       " 'Accuracy of Fold 5': 0.9555555555555556,\n",
       " 'Accuracy of Fold 6': 0.9555555555555556,\n",
       " 'Accuracy of Fold 7': 0.9777777777777777,\n",
       " 'Accuracy of Fold 8': 0.9111111111111111,\n",
       " 'Accuracy of Fold 9': 0.9555555555555556}"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "skf = StratifiedKFold(n_splits=10, random_state=444, shuffle=True)\n",
    "acc = {}\n",
    "\n",
    "for k, (train_index, validation_index) in enumerate(skf.split(X_train, y_train)):\n",
    "    pipeline_logist.fit(X_train[train_index], y_train[train_index])\n",
    "    acc['Accuracy of Fold %s' % k] = pipeline_logist.score(X_train[validation_index], y_train[validation_index])\n",
    "acc"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 11"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Build a KNN classifier (*hint: sklearn's KNeighborsClassifier*) using the original 30 input features and find a set of top-performing hyperparameters (i.e. weights and number of neighbors) using a **grid search** with a 10-fold cross-validation on the training dataset\n",
    "+ Identify the best combination of hyperparameters based on the F1 scores\n",
    "+ Apply the best KNN classifier you identified to the testing dataset and calculate its F1 score based on its predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yuthp\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_search.py:841: DeprecationWarning: The default of the `iid` parameter will change from True to False in version 0.22 and will be removed in 0.24. This will change numeric results when test-set sizes are unequal.\n",
      "  DeprecationWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'n_neighbors': 7, 'weights': 'uniform'}"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "\n",
    "hyper_parameters = {'weights': [\"uniform\", \"distance\"], 'n_neighbors': [3, 5, 7, 9, 11]}\n",
    "\n",
    "knn = KNeighborsClassifier()\n",
    "gs = GridSearchCV(knn, hyper_parameters, cv=10, scoring=\"f1\", return_train_score = True)\n",
    "gs.fit(X_train, y_train)\n",
    "gs.best_params_  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8684210526315789"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "gs.score(X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 12"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Create a chart to visualize the grid search results of Exercise 11\n",
    "+ Visualize how the average model quality metric of the validation folds varies across different combinations of hyperparameters \n",
    "+ Demonstrate the best hyperparameter combination identified in Exercise 11 indeed resulted in the highest model quality metric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean_fit_time</th>\n",
       "      <th>std_fit_time</th>\n",
       "      <th>mean_score_time</th>\n",
       "      <th>std_score_time</th>\n",
       "      <th>param_n_neighbors</th>\n",
       "      <th>param_weights</th>\n",
       "      <th>params</th>\n",
       "      <th>split0_test_score</th>\n",
       "      <th>split1_test_score</th>\n",
       "      <th>split2_test_score</th>\n",
       "      <th>...</th>\n",
       "      <th>split2_train_score</th>\n",
       "      <th>split3_train_score</th>\n",
       "      <th>split4_train_score</th>\n",
       "      <th>split5_train_score</th>\n",
       "      <th>split6_train_score</th>\n",
       "      <th>split7_train_score</th>\n",
       "      <th>split8_train_score</th>\n",
       "      <th>split9_train_score</th>\n",
       "      <th>mean_train_score</th>\n",
       "      <th>std_train_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.001197</td>\n",
       "      <td>0.001828</td>\n",
       "      <td>0.000710</td>\n",
       "      <td>0.001271</td>\n",
       "      <td>3</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'uniform'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.914286</td>\n",
       "      <td>...</td>\n",
       "      <td>0.939597</td>\n",
       "      <td>0.939597</td>\n",
       "      <td>0.953333</td>\n",
       "      <td>0.945946</td>\n",
       "      <td>0.940000</td>\n",
       "      <td>0.953333</td>\n",
       "      <td>0.942373</td>\n",
       "      <td>0.940000</td>\n",
       "      <td>0.944438</td>\n",
       "      <td>0.005048</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.002783</td>\n",
       "      <td>0.004665</td>\n",
       "      <td>3</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 3, 'weights': 'distance'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.001560</td>\n",
       "      <td>0.004680</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'uniform'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.882353</td>\n",
       "      <td>...</td>\n",
       "      <td>0.939189</td>\n",
       "      <td>0.929293</td>\n",
       "      <td>0.923077</td>\n",
       "      <td>0.926174</td>\n",
       "      <td>0.929293</td>\n",
       "      <td>0.936877</td>\n",
       "      <td>0.922559</td>\n",
       "      <td>0.932432</td>\n",
       "      <td>0.928866</td>\n",
       "      <td>0.005472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.001562</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>0.001562</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>5</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 5, 'weights': 'distance'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000103</td>\n",
       "      <td>0.000310</td>\n",
       "      <td>7</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 7, 'weights': 'uniform'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>...</td>\n",
       "      <td>0.926174</td>\n",
       "      <td>0.918919</td>\n",
       "      <td>0.918919</td>\n",
       "      <td>0.929293</td>\n",
       "      <td>0.920530</td>\n",
       "      <td>0.924092</td>\n",
       "      <td>0.923588</td>\n",
       "      <td>0.922559</td>\n",
       "      <td>0.924099</td>\n",
       "      <td>0.003765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.001563</td>\n",
       "      <td>0.004688</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 7, 'weights': 'distance'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.001562</td>\n",
       "      <td>0.004687</td>\n",
       "      <td>9</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 9, 'weights': 'uniform'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.937500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.912752</td>\n",
       "      <td>0.919463</td>\n",
       "      <td>0.915825</td>\n",
       "      <td>0.915254</td>\n",
       "      <td>0.912752</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>0.915825</td>\n",
       "      <td>0.915254</td>\n",
       "      <td>0.916346</td>\n",
       "      <td>0.003423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>9</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 9, 'weights': 'distance'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.000039</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>uniform</td>\n",
       "      <td>{'n_neighbors': 11, 'weights': 'uniform'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.937500</td>\n",
       "      <td>...</td>\n",
       "      <td>0.909091</td>\n",
       "      <td>0.905405</td>\n",
       "      <td>0.898649</td>\n",
       "      <td>0.915254</td>\n",
       "      <td>0.905405</td>\n",
       "      <td>0.920000</td>\n",
       "      <td>0.915254</td>\n",
       "      <td>0.912162</td>\n",
       "      <td>0.910365</td>\n",
       "      <td>0.006220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>11</td>\n",
       "      <td>distance</td>\n",
       "      <td>{'n_neighbors': 11, 'weights': 'distance'}</td>\n",
       "      <td>0.875</td>\n",
       "      <td>0.969697</td>\n",
       "      <td>0.937500</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows Ã— 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
       "0       0.001197      0.001828         0.000710        0.001271   \n",
       "1       0.000000      0.000000         0.002783        0.004665   \n",
       "2       0.001560      0.004680         0.000000        0.000000   \n",
       "3       0.001562      0.004687         0.001562        0.004687   \n",
       "4       0.000000      0.000000         0.000103        0.000310   \n",
       "5       0.001563      0.004688         0.000000        0.000000   \n",
       "6       0.000000      0.000000         0.001562        0.004687   \n",
       "7       0.000000      0.000000         0.000000        0.000000   \n",
       "8       0.000039      0.000117         0.000000        0.000000   \n",
       "9       0.000000      0.000000         0.000000        0.000000   \n",
       "\n",
       "  param_n_neighbors param_weights                                      params  \\\n",
       "0                 3       uniform    {'n_neighbors': 3, 'weights': 'uniform'}   \n",
       "1                 3      distance   {'n_neighbors': 3, 'weights': 'distance'}   \n",
       "2                 5       uniform    {'n_neighbors': 5, 'weights': 'uniform'}   \n",
       "3                 5      distance   {'n_neighbors': 5, 'weights': 'distance'}   \n",
       "4                 7       uniform    {'n_neighbors': 7, 'weights': 'uniform'}   \n",
       "5                 7      distance   {'n_neighbors': 7, 'weights': 'distance'}   \n",
       "6                 9       uniform    {'n_neighbors': 9, 'weights': 'uniform'}   \n",
       "7                 9      distance   {'n_neighbors': 9, 'weights': 'distance'}   \n",
       "8                11       uniform   {'n_neighbors': 11, 'weights': 'uniform'}   \n",
       "9                11      distance  {'n_neighbors': 11, 'weights': 'distance'}   \n",
       "\n",
       "   split0_test_score  split1_test_score  split2_test_score       ...         \\\n",
       "0              0.875           0.969697           0.914286       ...          \n",
       "1              0.875           0.969697           0.941176       ...          \n",
       "2              0.875           0.969697           0.882353       ...          \n",
       "3              0.875           0.969697           0.909091       ...          \n",
       "4              0.875           0.969697           0.909091       ...          \n",
       "5              0.875           0.969697           0.909091       ...          \n",
       "6              0.875           0.969697           0.937500       ...          \n",
       "7              0.875           0.969697           0.909091       ...          \n",
       "8              0.875           0.969697           0.937500       ...          \n",
       "9              0.875           0.969697           0.937500       ...          \n",
       "\n",
       "   split2_train_score  split3_train_score  split4_train_score  \\\n",
       "0            0.939597            0.939597            0.953333   \n",
       "1            1.000000            1.000000            1.000000   \n",
       "2            0.939189            0.929293            0.923077   \n",
       "3            1.000000            1.000000            1.000000   \n",
       "4            0.926174            0.918919            0.918919   \n",
       "5            1.000000            1.000000            1.000000   \n",
       "6            0.912752            0.919463            0.915825   \n",
       "7            1.000000            1.000000            1.000000   \n",
       "8            0.909091            0.905405            0.898649   \n",
       "9            1.000000            1.000000            1.000000   \n",
       "\n",
       "   split5_train_score  split6_train_score  split7_train_score  \\\n",
       "0            0.945946            0.940000            0.953333   \n",
       "1            1.000000            1.000000            1.000000   \n",
       "2            0.926174            0.929293            0.936877   \n",
       "3            1.000000            1.000000            1.000000   \n",
       "4            0.929293            0.920530            0.924092   \n",
       "5            1.000000            1.000000            1.000000   \n",
       "6            0.915254            0.912752            0.920000   \n",
       "7            1.000000            1.000000            1.000000   \n",
       "8            0.915254            0.905405            0.920000   \n",
       "9            1.000000            1.000000            1.000000   \n",
       "\n",
       "   split8_train_score  split9_train_score  mean_train_score  std_train_score  \n",
       "0            0.942373            0.940000          0.944438         0.005048  \n",
       "1            1.000000            1.000000          1.000000         0.000000  \n",
       "2            0.922559            0.932432          0.928866         0.005472  \n",
       "3            1.000000            1.000000          1.000000         0.000000  \n",
       "4            0.923588            0.922559          0.924099         0.003765  \n",
       "5            1.000000            1.000000          1.000000         0.000000  \n",
       "6            0.915825            0.915254          0.916346         0.003423  \n",
       "7            1.000000            1.000000          1.000000         0.000000  \n",
       "8            0.915254            0.912162          0.910365         0.006220  \n",
       "9            1.000000            1.000000          1.000000         0.000000  \n",
       "\n",
       "[10 rows x 32 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result=pd.DataFrame(gs.cv_results_)\n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "score_uniform=result[result.param_weights=='uniform']['mean_test_score']\n",
    "score_distance=result[result.param_weights=='distance']['mean_test_score']\n",
    "\n",
    "plt.plot(hyper_parameters['n_neighbors'],score_uniform, label='uniform')\n",
    "plt.plot(hyper_parameters['n_neighbors'],score_distance, label='distance')\n",
    "plt.legend(loc = 'best')\n",
    "plt.xlabel('Value of K neighbour')\n",
    "plt.ylabel('Average Score in cross-validation')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 13"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Build a KNN classifier (*hint: sklearn's KNeighborsClassifier*) using the original 30 input features and find a set of top-performing hyperparameters (i.e. weights and number of neighbors) using a **random search** with a 10-fold cross-validation on the training dataset\n",
    "+ Identify the best combination of hyperparameters based on the F1 scores\n",
    "+ Apply the best KNN classifier you identified to the testing dataset and calculate the F1 score based on its predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best combination of hyperparameters: {'weights': 'uniform', 'n_neighbors': 7}\n",
      "F1 score: 0.868\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "knn = KNeighborsClassifier()\n",
    "hyperparameters= {'n_neighbors': range(1, 31), 'weights': ['uniform', 'distance']}\n",
    "random = RandomizedSearchCV(knn, hyperparameters, iid = True, cv = 10, random_state = 42)\n",
    "random.fit(X_train, y_train)\n",
    "\n",
    "print(\"best combination of hyperparameters:\", random.best_params_)\n",
    "random_best_n_neighbor = random.best_params_.get('n_neighbors')\n",
    "random_best_weight = random.best_params_.get('weights')\n",
    "\n",
    "knn_best = KNeighborsClassifier(n_neighbors = random_best_n_neighbor, weights = random_best_weight)\n",
    "knn_best.fit(X_train, y_train)\n",
    "y_test_pred_rs = knn_best.predict(X_test)\n",
    "print(\"F1 score: %.3f\" %f1_score(y_test, y_test_pred_rs))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 14"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Build a KNN classifier via a 10-fold cross-validation on the training dataset using the 30 original input features and the best hyperparameters identified in Exercise 13\n",
    "+ Build a Random Forest classifier via a 10-fold cross validation on the training dataset using the 30 original input features and setting 50 as the number of trees in the forest\n",
    "+ Create a pair of box plots to compare a model quality metric across the validation folds used to validate the KNN and Random Forest models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "cv = []\n",
    "knn_best = KNeighborsClassifier(n_neighbors = random_best_n_neighbor, weights = random_best_weight)\n",
    "cv_knn = cross_val_score(knn_best, X_train, y_train, cv = 10)\n",
    "cv.append(cv_knn)\n",
    "rf = RandomForestClassifier(n_estimators = 50, random_state = 42)\n",
    "cv_rf = cross_val_score(rf, X_train, y_train, cv = 10)\n",
    "cv.append(cv_rf)\n",
    "\n",
    "plt.boxplot(cv)\n",
    "plt.title('comparison of models')\n",
    "plt.xticks([1, 2], ['KNN classifier box', 'RF classifier box'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise 15"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Explain how the bias and variance would change when using a large vs. small k for the k-fold cross-validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "when the value of K is high, we will have more variance and the bias will be low and in the case when K is low the bias in the model will be high and variance will be low"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "### Exercise 16"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "+ Explain the difference between probability, odds, and odds ratio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "probability is defined as the no. of times a given even will occur divided my the total number of trials.\n",
    "value of the probability will always be between 0 and 1.The term odds is the probabaility that a specefic event will occur divided \n",
    "by the probability that the event will not occur\n",
    "The odds ratio is a statistic defined as the ratio of the odds of x in the presence of y and the odds of x without the presence of y. \n",
    "This statistic attempts to quantify the strength of the association between x  and y."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "In general terms, if the probabilty of an event occuring is P(x), then Odds_favour (x)= P(x)/(1-P(x)) ;\n",
    "\n",
    "Odds_against (x)= (1-P(x))/P(x)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
